# -*- coding: utf-8 -*-
"""Python Script to parse through scripts and search for CVE data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FSsI6ZrucAtGA46LEmi3po2NWe62kaSO
"""

import requests
import re
import os
!pip3 install Gitpython
!pip3 install gitpython --upgrade
import git

# Define the repository name and owner
repo_owner = "cldrn"
repo_name = "nmap-nse-scripts"

# Define the URL to access the repository contents using the Github API
contents_url = f"https://api.github.com/repos/cldrn/nmap-nse-scripts/contents"

# Send a GET request to the Github API to retrieve the repository contents
response = requests.get(contents_url)

# Check if the response was successful
if response.status_code == 200:
    # Get the repository contents data
    repo_contents = response.json()
    # Define the regular expression pattern to search for CVE data
    cve_pattern = re.compile(r'CVE-\d{4}-\d{4,7}')
    
    # Loop through the repository contents
    for content in repo_contents:
        # Check if the content is a folder
        if content["type"] == "dir":
            # Get the folder contents URL
            folder_url = content["url"]
            # Send a GET request to retrieve the folder contents
            folder_response = requests.get(folder_url)
            # Check if the response was successful
            if folder_response.status_code == 200:
                # Get the folder contents data
                folder_contents = folder_response.json()
                # Loop through the folder contents
                for folder_content in folder_contents:
                    # Check if the content is a .nse file
                    if folder_content["name"].endswith(".nse"):
                        # Get the .nse file content URL
                        file_url = folder_content["download_url"]
                        # Send a GET request to retrieve the file content
                        file_response = requests.get(file_url)
                        # Check if the response was successful
                        if file_response.status_code == 200:
                            # Get the file contents
                            file_contents = file_response.text
                            # Search for CVE data using the regular expression
                            cve_match = cve_pattern.search(file_contents)
                            if cve_match:
                                print(f"CVE data found in file: {folder_content['name']}")
                                print(cve_match.group(0))
                            else:
                                print("No CVE data found in file: ", folder_content["name"])
                        else:
                            print("Failed to retrieve file contents")
                            print("Response status code: ", file_response.status_code)
            else:
                print("Failed to retrieve folder contents")
                print("Response status code: ", folder_response.status_code)
else:
    print("Failed to retrieve repository contents")
    print("Response status code: ", response.status_code)

import requests
import re

# Define the repository name and owner
repo_owner = "cldrn"
repo_name = "nmap-nse-scripts"

# Define the URL to access the repository contents using the Github API
contents_url = f"https://api.github.com/repos/cldrn/nmap-nse-scripts/contents"

# Send a GET request to the Github API to retrieve the repository contents
response = requests.get(contents_url)

# Check if the response was successful
if response.status_code == 200:
    # Get the repository contents data
    repo_contents = response.json()
    # Define the regular expression pattern to search for CVE data
    cve_pattern = re.compile(r'CVE-\d{4}-\d{4,7}')
    
    # Open a file to store the found CVE numbers
    with open("found_cves.txt", "w") as cve_file:
        # Loop through the repository contents
        for content in repo_contents:
            # Check if the content is a folder
            if content["type"] == "dir":
                # Get the folder contents URL
                folder_url = content["url"]
                # Send a GET request to retrieve the folder contents
                folder_response = requests.get(folder_url)
                # Check if the response was successful
                if folder_response.status_code == 200:
                    # Get the folder contents data
                    folder_contents = folder_response.json()
                    # Loop through the folder contents
                    for folder_content in folder_contents:
                        # Check if the content is a .nse file
                        if folder_content["name"].endswith(".nse"):
                            # Get the .nse file content URL
                            file_url = folder_content["download_url"]
                            # Send a GET request to retrieve the file content
                            file_response = requests.get(file_url)
                            # Check if the response was successful
                            if file_response.status_code == 200:
                                # Get the file contents
                                file_contents = file_response.text
                                # Search for CVE data using the regular expression
                                cve_match = cve_pattern.search(file_contents)
                                if cve_match:
                                    cve_file.write(f"CVE data found in file: {folder_content['name']}\n")
                                    cve_file.write(f"{cve_match.group(0)}\n")
                                else:
                                    cve_file.write(f"No CVE data found in file: {folder_content['name']}\n")
                            else:
                                cve_file.write("Failed to retrieve file contents\n")
                                cve_file.write(f"Response status code: {file_response.status_code}\n")
                else:
                    cve_file.write("Failed to retrieve folder contents\n")
                    cve_file.write(f"Response status code: {folder_response.status_code}\n")

from google.colab import files
files.download("found_cves.txt")

import random

# Generate 10 random IP addresses
ips = []
for i in range(10):
    ip = ".".join(str(random.randint(0, 255)) for _ in range(4))
    ips.append(ip)

# Write the random IP addresses to a file
with open("random_ips.txt", "w") as file:
    for ip in ips:
        file.write(ip + "\n")

from google.colab import files
files.download("random_ips.txt")

! pip3 install python-nmap
import nmap
import re
!apt-get install -y nmap
import os
os.environ['PATH'] = os.environ['PATH'] + ':/path/to/nmap/executable'

# Read IP addresses from text file
with open('/content/random_ips.txt', 'r') as f:
    ip_list = f.read().splitlines()

# Read CVE numbers from text file
with open('/content/found_cves.txt', 'r') as f:
    cve_list = f.read().splitlines()

# Regex pattern for CVE numbers
cve_pattern = re.compile(r'CVE-\d{4}-\d{4,7}')

# Initialize nmap scanner
scanner = nmap.PortScanner()

# Scan all IP addresses
for ip in ip_list:
    scanner.scan(ip, arguments='-sV')
    for host in scanner.all_hosts():
        print(f'Host: {host}')
        for proto in scanner.all_protocols():
            lport = scanner.all_tcp() if proto == 'tcp' else scanner.all_udp()
            for port, info in lport.items():
                print(f'\tPort: {port}')
                print(f'\tService: {info["name"]}')
                print(f'\tProduct: {info["product"]}')
                print(f'\tVersion: {info["version"]}')
                # Check for CVE numbers in product and version
                matches = re.findall(cve_pattern, info["product"] + info["version"])
                if matches:
                    for match in matches:
                        if match in cve_list:
                            print(f'\t\tAffected by CVE: {match}')